# ***************************************************************************
# Copyright (c) 2017-2020 Siemens AG  All rights reserved.
# ***************************************************************************/
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL Siemens AG OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
# 
# Author(s): Thomas Riedmaier, Roman Bendt
--- ext/drcovlib/drcovlib.c
+++ ext/drcovlib/drcovlib.c
@@ -52,6 +52,7 @@
 
 #include "dr_api.h"
 #include "drmgr.h"
+#include "drreg.h"
 #include "drx.h"
 #include "drcovlib.h"
 #include "hashtable.h"
@@ -125,9 +126,11 @@
 {
     per_thread_t *data = iter_data;
     bb_entry_t *bb_entry = (bb_entry_t *)entry;
+    if (bb_entry->hits_since_last_reset != 0){ //CSA add this if
     dr_fprintf(data->log, "module[%3u]: " PFX ", %3u", bb_entry->mod_id, bb_entry->start,
                bb_entry->size);
     dr_fprintf(data->log, "\n");
+    }
     return true; /* continue iteration */
 }
 
@@ -147,7 +150,7 @@
         drtable_dump_entries(data->bb_table, data->log);
 }
 
-static void
+static bb_entry_t * //CSA change return type
 bb_table_entry_add(void *drcontext, per_thread_t *data, app_pc start, uint size)
 {
     bb_entry_t *bb_entry = drtable_alloc(data->bb_table, 1, NULL);
@@ -157,6 +160,7 @@
     /* we do not de-duplicate repeated bbs */
     ASSERT(size < USHRT_MAX, "size overflow");
     bb_entry->size = (ushort)size;
+    bb_entry->hits_since_last_reset = 0; //CSA init to zero
     if (res == DRCOVLIB_SUCCESS) {
         ASSERT(mod_id < USHRT_MAX, "module id overflow");
         bb_entry->mod_id = (ushort)mod_id;
@@ -171,6 +175,7 @@
         bb_entry->mod_id = UNKNOWN_MODULE_ID;
         bb_entry->start = (uint)(ptr_uint_t)start;
     }
+    return bb_entry; //csa return pointer to the newly allocated entry
 }
 
 #define INIT_BB_TABLE_ENTRIES 4096
@@ -365,7 +370,7 @@
      * 4. The duplication can be easily handled in a post-processing step,
      *    which is required anyway.
      */
-    bb_table_entry_add(drcontext, data, tag_pc, (uint)(end_pc - start_pc));
+    *user_data = (void *)bb_table_entry_add(drcontext, data, tag_pc, (uint)(end_pc - start_pc)); //CSA set user data
 
     if (go_native)
         return DR_EMIT_GO_NATIVE;
@@ -373,6 +378,128 @@
         return DR_EMIT_DEFAULT;
 }
 
+//CSA created
+//inspired by https://github.com/firodj/bbtrace/blob/master/clients/bbtrace.c, http://dynamorio.org/docs/samples/bbcount.c and winafl.c
+//static byte buf[8192];
+static dr_emit_flags_t event_bb_insert(void *drcontext, void *tag,
+	instrlist_t *bb, instr_t *instr, bool for_trace, bool translating, void *user_data)
+{
+	if (!drmgr_is_first_instr(drcontext, instr))
+		return DR_EMIT_DEFAULT;
+
+	//insert an increment operation
+#if defined(AARCH64) || defined(ARM)
+
+	reg_id_t reg_1 = 0, reg_2 = 0;
+	// for (int i = 0; i < 20; i++) {
+	// 	buf[i] = 0;
+	// }
+	//NOTIFY(0, "nulltes FLUUUFIIII%s\n", "");
+
+	//Save registers
+	drreg_reserve_aflags(drcontext, bb, instr);
+	drreg_reserve_register(drcontext, bb, instr, NULL, &reg_1);
+	drreg_reserve_register(drcontext, bb, instr, NULL, &reg_2);
+	
+	//load
+	size_t naked_addr = (size_t)&(((bb_entry_t*)user_data)->hits_since_last_reset);
+
+#if defined(ARM)
+	instr_t* instructions[] = {NULL, NULL, NULL, NULL, NULL};
+	size_t instructions_len = sizeof(instructions)/sizeof(instructions[0]);
+	// load high
+	instructions[0] = INSTR_CREATE_movw(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16(naked_addr & 0xFFFF)
+			);
+
+	// load low
+	instructions[1] = INSTR_CREATE_movt(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16((naked_addr>>16) & 0xFFFF)
+			);
+#else 
+	instr_t* instructions[] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};
+	size_t instructions_len = sizeof(instructions)/sizeof(instructions[0]);
+	// load 
+	instructions[0] = INSTR_CREATE_movk(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16((naked_addr>>0) & 0xFFFF),
+			OPND_CREATE_INT8(0)
+			);
+	instructions[1] = INSTR_CREATE_movk(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16((naked_addr>>16) & 0xFFFF),
+			OPND_CREATE_INT8(16)
+			);
+	instructions[2] = INSTR_CREATE_movk(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16((naked_addr>>32) & 0xFFFF),
+			OPND_CREATE_INT8(32)
+			);
+	instructions[3] = INSTR_CREATE_movk(drcontext,
+			opnd_create_reg(reg_1),
+			OPND_CREATE_INT16((naked_addr>>48) & 0xFFFF),
+			OPND_CREATE_INT8(48)
+			);
+#endif
+
+	// deref
+	instructions[instructions_len-3] = INSTR_CREATE_ldr(drcontext,
+			opnd_create_reg(reg_2),
+			OPND_CREATE_MEM32(reg_1, 0)
+			);
+
+	//Inc
+	instructions[instructions_len-2] = INSTR_CREATE_add(drcontext,
+			opnd_create_reg(reg_2),
+			opnd_create_reg(reg_2),
+			OPND_CREATE_INT(1));
+
+	// store
+		instructions[instructions_len-1] = INSTR_CREATE_str(drcontext,
+			OPND_CREATE_MEM32(reg_1, 0),
+			opnd_create_reg(reg_2)
+			);
+
+	for (int i = 0; i < 5; i++) {
+		//instr_encode(drcontext, instructions[i], buf+4*i);
+		instrlist_meta_preinsert(bb, instr, instructions[i]);
+	}
+	//NOTIFY(0, "FLUFFI instructions: %s\n", "");
+	// for (int i = 0; i < 20; i++) {
+	// 	NOTIFY(0, "%0x ", buf[i]);
+	// 	buf[i] = 0;
+	// }
+	//NOTIFY(0, "%s", "\n");
+
+	// opnd_create_rel_addr((void *)&buf[128], OPSZ_PTR)
+	//opnd_create_rel_addr((void*)&(((bb_entry_t*)user_data)->hits_since_last_reset), OPSZ_PTR)
+	//OPND_CREATE_ABSMEM((void*)&(((bb_entry_t*)user_data)->hits_since_last_reset), OPSZ_4)
+	// opnd_create_rel_addr((void *)&buf[128], OPSZ_PTR)
+	//opnd_create_rel_addr((void*)&(((bb_entry_t*)user_data)->hits_since_last_reset), OPSZ_PTR)
+	//OPND_CREATE_ABSMEM((void*)&(((bb_entry_t*)user_data)->hits_since_last_reset), OPSZ_4)
+
+	drreg_unreserve_register(drcontext, bb, instr, reg_2);
+	drreg_unreserve_register(drcontext, bb, instr, reg_1);
+	drreg_unreserve_aflags(drcontext, bb, instr);
+	//NOTIFY(0, "drittes FLUUUFIIII%s\n", "");
+
+#else
+	drreg_reserve_aflags(drcontext, bb, instr);
+
+	instrlist_meta_preinsert(bb, instr,
+		INSTR_CREATE_inc(drcontext,
+		OPND_CREATE_ABSMEM(&(((bb_entry_t*)user_data)->hits_since_last_reset)
+		, OPSZ_4)));
+
+	drreg_unreserve_aflags(drcontext, bb, instr);
+
+#endif
+
+	return DR_EMIT_DEFAULT;
+}
+
 static void
 event_thread_exit(void *drcontext)
 {
@@ -575,7 +702,7 @@
 
     drmgr_register_thread_init_event(event_thread_init);
     drmgr_register_thread_exit_event(event_thread_exit);
-    drmgr_register_bb_instrumentation_event(event_basic_block_analysis, NULL, NULL);
+    drmgr_register_bb_instrumentation_event(event_basic_block_analysis, event_bb_insert, NULL); //CSA add modification function
     dr_register_filter_syscall_event(event_filter_syscall);
     drmgr_register_pre_syscall_event(event_pre_syscall);
 #ifdef UNIX
@@ -588,3 +715,81 @@
 
     return event_init();
 }
+
+//CSA created
+static bool
+bb_table_entry_clear_hits(ptr_uint_t idx, void *entry, void *iter_data)
+{
+	bb_entry_t *bb_entry = (bb_entry_t *)entry;
+	bb_entry->hits_since_last_reset = 0;
+
+	return true;
+}
+
+
+//CSA created
+drcovlib_status_t
+reset_coverage(void)
+{
+	void **drcontexts = NULL;
+	uint num_threads, i;
+	if (dr_suspend_all_other_threads_ex(&drcontexts, &num_threads, NULL, DR_SUSPEND_NATIVE)) {
+		NOTIFY(1, "suspended %d threads\n", num_threads);
+
+		if (!drcov_per_thread){
+			drtable_iterate(global_data->bb_table, global_data, bb_table_entry_clear_hits);
+		}
+		else{
+			for (i = 0; i < num_threads; i++) {
+				per_thread_t *data = (per_thread_t *)drmgr_get_tls_field(drcontexts[i], tls_idx);
+				drtable_iterate(data->bb_table, data, bb_table_entry_clear_hits);
+			}
+		}
+
+		if (!dr_resume_all_other_threads(drcontexts, num_threads)) {
+			ASSERT(false, "failed to resume threads");
+		}
+	}
+	else {
+		ASSERT(false, "failed to suspend threads");
+	}
+
+	return DRCOVLIB_SUCCESS;
+}
+
+//CSA created
+drcovlib_status_t
+dump_current_coverage(void)
+{
+	void **drcontexts = NULL;
+	uint num_threads, i;
+	if (dr_suspend_all_other_threads_ex(&drcontexts, &num_threads, NULL, DR_SUSPEND_NATIVE)) {
+		NOTIFY(1, "suspended %d threads\n", num_threads);
+
+		if (!drcov_per_thread){
+			dump_drcov_data(NULL, global_data);
+
+			dr_close_file(global_data->log);
+			log_file_create(NULL, global_data);
+		}
+		else{
+			for (i = 0; i < num_threads; i++) {
+				per_thread_t *data = (per_thread_t *)drmgr_get_tls_field(drcontexts[i], tls_idx);
+				dump_drcov_data(drcontexts[i], data);
+
+				dr_close_file(data->log);
+				log_file_create(drcontexts[i], data);
+			}
+		}
+
+		if (!dr_resume_all_other_threads(drcontexts, num_threads)) {
+			ASSERT(false, "failed to resume threads");
+		}
+	}
+	else {
+		ASSERT(false, "failed to suspend threads");
+	}
+
+	return DRCOVLIB_SUCCESS;
+}
+
